#!/usr/bin/env python3

'''
The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first
ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred
divisors?
'''
import collections

def gen_primes(nth=None):
    primes = []
    n = 2
    while True:
        yield n
        primes.append(n)
        n += 1
        if nth and len(primes) >= nth:
            raise StopIteration
        while any([n % p == 0 for p in primes]):
            n += 1

def decompose(n, primes):
    factors = collections.Counter()
    for p in primes:
        while n % p == 0:
            n /= p
            factors[p] += 1
    return factors

def mul(iterable):
    total = 1
    for i in iterable:
        total *= i
    return total

def main():
    target = 500
    # Target number of factors equals (a+1)(b+1)...(y+1)
    # At most we are going to need up to the nth prime
    limit = target
    nth = 1
    while limit >= 1:
        limit /= 2 # One (a+1) factor with a=1. Maximizes number of factors.
        nth += 1
    primes = list(gen_primes(nth))
    # Start at T(2) = 3
    n = 2
    last = decompose(n, primes)
    while True:
        new = decompose(n+1, primes)
        # Apply n*(n+1)/2 to prime factorization
        factors = last + new
        factors[2] -= 1
        # Count factors of T(n), i.e. f = (a+1)(b+1)...(y+1)
        numfactors = mul((x+1 for x in factors.values()))
        if numfactors >= target:
            break
        # Advance iteration
        n += 1
        last = new
    # Get T(n) actual value
    result = int(n * (n+1) * 0.5)
    print('Result: ', result)

if __name__ == '__main__':
    main()
